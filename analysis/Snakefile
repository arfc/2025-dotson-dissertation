import sys

latexopt = """
            -shell-escape 
            -interaction nonstopmode 
            -file-line-error 
            -halt-on-error
            """

docs_path = "../docs/"
figure_log = "figures.log"

with open(f"{docs_path}Makefile", "r") as file:
    lines = file.readlines()

output_name = lines[0].strip('\n').replace(' ', '').split('=')[-1]

#============================RULES================================
rule targets:
    input:
        thesis = f"{docs_path}{output_name}.pdf",
        dag = "dag.png",

rule collect_figures:
    input:
        social_max_plot = f"{docs_path}figures/social_max.pgf",
        elasticity_plot = f"{docs_path}figures/elasticity.pgf",
        example_pareto_plot = f"{docs_path}figures/truss2d_pareto.pgf",
        near_optimal_plot = f"{docs_path}figures/near-optimal-pareto.pgf",
        interior_points_plot = f"{docs_path}figures/nd-mga-paretofront.pgf",
        pareto_3d = f"{docs_path}figures/3d-mga-paretofront.pgf"
    output:
        log = figure_log
    shell:
        """
        for file in {input}; do
            echo $file >> {output.log}
        done
        """

if sys.platform == 'Windows':
    rule build_thesis:
        input: 
            main_tex = f"{docs_path}{output_name}.tex",
            log = figure_log
        output: f"{docs_path}{output_name}.pdf"
        shell:
            f"""
            cd {docs_path} && \
            pdflatex {latexopt} {output_name}.tex && \
            biber {output_name} && \
            pdflatex {latexopt} {output_name}.tex && \
            pdflatex {latexopt} {output_name}.tex &&
            """
elif sys.platform in ['darwin', 'linux']:
    rule build_thesis:
        input: 
            main_tex = f"{docs_path}{output_name}.tex",
            log = figure_log
        output: f"{docs_path}{output_name}.pdf"
        shell:
            f"""
            (cd {docs_path} && make)
            """

rule build_dag:
    input: "Snakefile"
    output:
        "dag.png"
    shell:
        "snakemake --dag | dot -Tpng > {output}"


rule plot_social_welfare_max:
    input: "scripts/social_welfare_maximization.py"
    output: 
        social_max_plot = f"{docs_path}figures/social_max.pgf",
        elasticity_plot = f"{docs_path}figures/elasticity.pgf"
    script: f"{input}"


rule plot_example_fronts:
    input: "scripts/pareto_front.py"
    output:
        example_pareto_plot = f"{docs_path}figures/truss2d_pareto.pgf",
        interior_points_plot = f"{docs_path}figures/nd-mga-paretofront.pgf",
        near_optimal_plot = f"{docs_path}figures/near-optimal-pareto.pgf"
    script: f"{input}"


rule plot_3d_fronts:
    input: "scripts/pareto_3D.py"
    output:
        pareto_3d = f"{docs_path}figures/3d-mga-paretofront.pgf"
    script: f"{input}"