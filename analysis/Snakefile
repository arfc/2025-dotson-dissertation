import sys

latexopt = """
            -shell-escape 
            -interaction nonstopmode 
            -file-line-error 
            -halt-on-error
            """

docs_path = "../docs/"
data_path = "../data/"
osier_data = f"{data_path}2023-osier-simulation-results/"
figure_log = "figures.log"
ch4_log = "ch4.log"
ch3_log = "ch3.log"

with open(f"{docs_path}Makefile", "r") as file:
    lines = file.readlines()

output_name = lines[0].strip('\n').replace(' ', '').split('=')[-1]

#============================RULES================================
rule targets:
    input:
        thesis = f"{docs_path}{output_name}.pdf",

# rule literature_review:
#     input:

#============================OSIER CHAPTER================================
rule plot_reference_directions:
    output:
        reference_directions = f"{docs_path}figures/03_osier_chapter/reference_directions.pgf",
    script: f"scripts/03-osier-scripts/plot_reference_directions.py"


rule osier_chapter:
    input:
        reference_directions = f"{docs_path}figures/03_osier_chapter/reference_directions.pgf",
    output:
        ch3_log
    shell:
        """
        for file in {input}; do
            echo $file >> {output}
        done
        """

#============================BENCHMARK CHAPTER================================
rule retrieve_prelim_results:
    output:
        four_obj_results = f"{osier_data}2023-05-30-NOBJ4-USNGA3-results.pkl",
        unsga3_results = f"{osier_data}2022-12-31-USNGA3-results.pkl",
        pf_nsga3 = f"{osier_data}algorithm_comparison/2023-05-06_nsga3_PF_Fitness_95.pkl_95",
        pf_nsga2 = f"{osier_data}algorithm_comparison/2023-05-12-nsga2_PF_Fitness_95.pkl_95",
        temoa_F2 = f"{osier_data}model_comparison/2022-11-18-temoa_mga_objective_remap.pkl",
        temoa_mga_design = f"{osier_data}model_comparison/2022-11-18-temoa-mga-design.pkl",
        unsga3_design = f"{osier_data}model_comparison/2022-12-31-optimal_design_X.pkl",
        unsga3_objective = f"{osier_data}model_comparison/2022-12-31-optimal_objective_F.pkl",
    script: "scripts/04-benchmark-scripts/retrieve_databundle.py"

rule retrieve_load_data:
    output:
        load_data = f"{data_path}uiuc_demand_data.csv"
    shell: f"""
            (cd {data_path} && \
            curl -O \
            "https://raw.githubusercontent.com/samgdotson/2021-dotson-ms/refs/heads/master/data/uiuc_demand_data.csv")
            """

rule plot_load_data:
    input:
        load_data = f"{data_path}uiuc_demand_data.csv",
    output:
        load_curve = f"{docs_path}figures/04_benchmark_chapter/normalized_load_curves.pgf"
    script: "scripts/04-benchmark-scripts/plot_load_duration.py"

rule plot_algorithm_comparison:
    input:
        unsga3_results = f"{osier_data}2022-12-31-USNGA3-results.pkl",
        pf_nsga3 = f"{osier_data}algorithm_comparison/2023-05-06_nsga3_PF_Fitness_95.pkl_95",
        pf_nsga2 = f"{osier_data}algorithm_comparison/2023-05-12-nsga2_PF_Fitness_95.pkl_95"
    output:
        alg_comp_plot = f"{docs_path}figures/04_benchmark_chapter/algorithm_comparison_kde.pgf"
    script: "scripts/04-benchmark-scripts/plot_algorithm_comparison.py"

rule plot_temoa_comparison:
    input:
        unsga3_results = f"{osier_data}2022-12-31-USNGA3-results.pkl",
        temoa_F2 = f"{osier_data}model_comparison/2022-11-18-temoa_mga_objective_remap.pkl",
        temoa_mga_design = f"{osier_data}model_comparison/2022-11-18-temoa-mga-design.pkl",
        unsga3_design = f"{osier_data}model_comparison/2022-12-31-optimal_design_X.pkl",
        unsga3_objective = f"{osier_data}model_comparison/2022-12-31-optimal_objective_F.pkl",
        techs =f"{osier_data}model_comparison/2022-12-31-techset.pkl"
    output:
        temoa_comparison_01 = f"{docs_path}figures/04_benchmark_chapter/temoa_osier_benchmark_01.pgf",
        temoa_comparison_02 = f"{docs_path}figures/04_benchmark_chapter/osier_mga_subset_01.pgf",
        temoa_comparison_03 = f"{docs_path}figures/04_benchmark_chapter/temoa_osier_mga_comparison1x3.pgf",
    script: "scripts/04-benchmark-scripts/plot_temoa_comparison.py"

rule benchmark_chapter:
    input:
        temoa_comparison_01 = f"{docs_path}figures/04_benchmark_chapter/temoa_osier_benchmark_01.pgf",
        temoa_comparison_02 = f"{docs_path}figures/04_benchmark_chapter/osier_mga_subset_01.pgf",
        temoa_comparison_03 = f"{docs_path}figures/04_benchmark_chapter/temoa_osier_mga_comparison1x3.pgf",
        alg_comp_plot = f"{docs_path}figures/04_benchmark_chapter/algorithm_comparison_kde.pgf",
        load_curve = f"{docs_path}figures/04_benchmark_chapter/normalized_load_curves.pgf"
    output:
        ch4_log
    shell:
        """
        for file in {input}; do
            echo $file >> {output}
        done
        """


rule collect_figures:
    input:
        social_max_plot = f"{docs_path}figures/social_max.pgf",
        elasticity_plot = f"{docs_path}figures/elasticity.pgf",
        example_pareto_plot = f"{docs_path}figures/truss2d_pareto.pgf",
        near_optimal_plot = f"{docs_path}figures/near-optimal-pareto.pgf",
        interior_points_plot = f"{docs_path}figures/nd-mga-paretofront.pgf",
        pareto_3d = f"{docs_path}figures/3d-mga-paretofront.pgf",
        example_mga_plot = f"{docs_path}figures/mga-fft-example.pgf",
        dag = "dag.png"
    output:
        log = figure_log
    shell:
        """
        for file in {input}; do
            echo $file >> {output.log}
        done
        """

if sys.platform == 'Windows':
    rule build_thesis:
        input: 
            main_tex = f"{docs_path}{output_name}.tex",
            log = figure_log,
            ch4_log=ch4_log,
            ch3_log=ch3_log,
        output: f"{docs_path}{output_name}.pdf"
        shell:
            f"""
            cd {docs_path} && \
            pdflatex {latexopt} {output_name}.tex && \
            biber {output_name} && \
            pdflatex {latexopt} {output_name}.tex && \
            pdflatex {latexopt} {output_name}.tex &&
            """
elif sys.platform in ['darwin', 'linux']:
    rule build_thesis:
        input: 
            main_tex = f"{docs_path}{output_name}.tex",
            log = figure_log,
            ch4_log = ch4_log,
        output: f"{docs_path}{output_name}.pdf"
        shell:
            f"""
            (cd {docs_path} && make)
            """

rule build_dag:
    input: "Snakefile"
    output:
        "dag.png"
    shell:
        "snakemake --dag | dot -Tpng > {output}"


rule plot_social_welfare_max:
    input: "scripts/social_welfare_maximization.py"
    output: 
        social_max_plot = f"{docs_path}figures/social_max.pgf",
        elasticity_plot = f"{docs_path}figures/elasticity.pgf"
    script: f"{input}"


rule plot_example_fronts:
    input: "scripts/pareto_front.py"
    output:
        example_pareto_plot = f"{docs_path}figures/truss2d_pareto.pgf",
        interior_points_plot = f"{docs_path}figures/nd-mga-paretofront.pgf",
        near_optimal_plot = f"{docs_path}figures/near-optimal-pareto.pgf"
    script: f"{input}"


rule plot_mga_example:
    input: "scripts/mga_fft_example.py"
    output:
        example_mga_plot = f"{docs_path}figures/mga-fft-example.pgf",
    script: f"{input}"


rule plot_3d_fronts:
    input: "scripts/pareto_3D.py"
    output:
        pareto_3d = f"{docs_path}figures/3d-mga-paretofront.pgf"
    script: f"{input}"